USE MUSIC_STUDIO;

DELIMITER $$

DROP PROCEDURE IF EXISTS displayClients$$

CREATE PROCEDURE displayClients()
BEGIN
	SELECT * FROM CLIENT;
END;
$$

DELIMITER; 

DELIMITER $$

DROP PROCEDURE IF EXISTS displayEmployees $$

CREATE PROCEDURE displayEmployees()
BEGIN
	SELECT * FROM EMPLOYEE;
END;

$$

DELIMITER;

DELIMITER $$

DROP PROCEDURE IF EXISTS emp_sessions $$

CREATE PROCEDURE emp_sessions(
emp_id INT)
BEGIN
	SELECT * FROM BOOKING WHERE EMP_ID = emp_id;
END;

$$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS client_sessions $$

CREATE PROCEDURE client_sessions(
c_email VARCHAR(100))
BEGIN
	SELECT * FROM BOOKING WHERE CLIENT_EMAIL = c_email;
END;

$$

DELIMITER ;

DELIMITER $$

DROP FUNCTION IF EXISTS calc_year_earnings $$

CREATE FUNCTION calc_year_earnings()

RETURNS FLOAT

BEGIN
	DECLARE EARNINGS FLOAT;
		SELECT SUM(SERVICES.PRICE) INTO EARNINGS
		FROM SERVICES
		JOIN BOOKING ON BOOKING.SERVICE_NAME = SERVICES.SERVICE_NAME;
	RETURN EARNINGS;
END $$

DELIMITER;

DELIMITER $$

DROP FUNCTION IF EXISTS calc_month_earnings $$

CREATE FUNCTION calc_month_earnings(
earn_month VARCHAR(2))

RETURNS FLOAT

BEGIN
	DECLARE EARNINGS FLOAT;
    DECLARE POS VARCHAR(20);
    SET POS = CONCAT('_____',earn_month,'%');
		SELECT SUM(SERVICES.PRICE) INTO EARNINGS
		FROM SERVICES
		JOIN BOOKING ON BOOKING.SERVICE_NAME = SERVICES.SERVICE_NAME
		WHERE BOOKING_DATE LIKE POS;
	RETURN EARNINGS;
END;
$$

DELIMITER;

DELIMITER $$

DROP FUNCTION IF EXISTS calc_emp_earnings $$

CREATE FUNCTION calc_emp_earnings(
id INT)

RETURNS FLOAT
BEGIN
	DECLARE EARNINGS FLOAT;
		SELECT SUM(SERVICES.PRICE) INTO EARNINGS
		FROM BOOKING
		JOIN SERVICES ON SERVICES.SERVICE_NAME = BOOKING.SERVICE_NAME
		JOIN EMPLOYEE ON EMPLOYEE.EMP_ID = BOOKING.EMP_ID
		WHERE BOOKING.EMP_ID = id;
	RETURN EARNINGS;
END $$

DELIMITER ;

DELIMITER $$ 

DROP PROCEDURE IF EXISTS emp_earnings $$

CREATE PROCEDURE emp_earnings(
id INT)
BEGIN
	SELECT BOOKING.BOOKING_NUMBER, BOOKING.CLIENT_EMAIL, BOOKING.EMP_ID, calc_emp_earnings(id) AS EARNINGS
		FROM BOOKING
		JOIN SERVICES ON SERVICES.SERVICE_NAME = BOOKING.SERVICE_NAME
		JOIN EMPLOYEE ON EMPLOYEE.EMP_ID = BOOKING.EMP_ID
		WHERE BOOKING.EMP_ID = id
		GROUP BY BOOKING.BOOKING_NUMBER;
END; 
$$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS month_earnings $$

CREATE PROCEDURE month_earnings(
earn_month VARCHAR(10))

BEGIN
    DECLARE POS VARCHAR(20);
    SET POS = CONCAT('_____',earn_month,'%') ;
		SELECT earn_month AS MONTH, SUM(SERVICES.PRICE) AS EARNINGS
		FROM SERVICES
		JOIN BOOKING ON BOOKING.SERVICE_NAME = SERVICES.SERVICE_NAME
		WHERE BOOKING_DATE LIKE POS;
END; 
$$

DELIMITER $$

DROP PROCEDURE IF EXISTS year_earnings $$

CREATE PROCEDURE year_earnings(
year VARCHAR(10))

BEGIN
	DECLARE EARNINGS FLOAT;
	DECLARE POS VARCHAR(20);
    SET POS = CONCAT(year,'%') ;
		SELECT year AS YEAR, SUM(SERVICES.PRICE) AS EARNINGS
		FROM SERVICES
		JOIN BOOKING ON BOOKING.SERVICE_NAME = SERVICES.SERVICE_NAME
		WHERE BOOKING_DATE LIKE POS;
END; 
$$

DELIMITER;

DELIMITER $$

DROP PROCEDURE IF EXISTS addClient $$

CREATE PROCEDURE addClient(
c_fname VARCHAR(50),
c_lname VARCHAR(50),
c_email VARCHAR(100),
address VARCHAR(150),
phone_number VARCHAR(20)
)
BEGIN
	INSERT INTO CLIENT VALUES(c_fname, c_lname, c_email, address, phone_number);
END; 
$$

DELIMITER;

DELIMITER $$

DROP PROCEDURE IF EXISTS addEmp $$

CREATE PROCEDURE addEmp(
e_fname VARCHAR(50),
e_lname VARCHAR(50),
e_email VARCHAR(100))
BEGIN
	INSERT INTO EMPLOYEE(EMP_FIRST_NAME, EMP_LAST_NAME, EMP_EMAIL)VALUES(e_fname, e_lname, e_email);
END;
$$

DELIMITER;

DELIMITER $$

DROP PROCEDURE IF EXISTS book_session $$

CREATE PROCEDURE book_session(
c_email VARCHAR(100),
service VARCHAR(100),
assign_emp INT,
date DATE
)
BEGIN
	INSERT INTO BOOKING(CLIENT_EMAIL, SERVICE_NAME, EMP_ID, BOOKING_DATE)VALUES(c_email,service,assign_emp,date);
END;
$$

DELIMITER;

DELIMITER $$

DROP PROCEDURE IF EXISTS all_session$$

CREATE PROCEDURE all_session()
BEGIN
	SELECT * FROM BOOKING;
END;
$$
DELIMITER;

DELIMITER $$

DROP PROCEDURE IF EXISTS addService $$
CREATE PROCEDURE addService(
sname VARCHAR(50),
sdescribtion VARCHAR(150),
sprice FLOAT
)
BEGIN
	INSERT INTO SERVICES VALUES(sname,sdescription,sprice);
END;
$$

DELIMITER;

DELIMITER $$

DROP PROCEDURE IF EXISTS viewService $$
CREATE PROCEDURE viewService()
BEGIN
	SELECT * FROM SERVICES;
END;
$$

